################################################################################
#
# Multi-vehicle IRP branch-and-cut: example of the input configuration file.
#
################################################################################
#
# --- Execution configuration options ---
#
# ============================= General parameters =============================
#
# (std::string): single instance path or instances directory (all instances from
# this directory are executed in batch).
# (single instance execution)
instance_path = ./input/instances/abs1n15.dat
# (batch execution)
# instance_path = ./input/instances/
#
# (std::string): directory path where all methods output (results, statistics,
# etc) will be stored. A folder is created if it does not exist.
output_dir = ./output/
#
# ============================= Solver parameters ==============================
#
# (bool): silences (or not) the solver output.
solver_show_log = true
#
# (unsigned int): solver maximum execution time (in seconds) in every solver
# execution. Set 'unlimited' to don't limit it.
solver_time_limit = 7200
#
# (unsigned int): number of threads used by the solver. Set 'max' to use all the
# machine threads.
solver_nb_threads = max
#
# ============================== Model parameters ==============================
#
# (unsigned int): number of vehicles (K).
nb_vehicles = 3
#
# (unsigned int): execution model invetory policy:
#   0: maximum level inventory policy (ML).
#   1: order-up to level inventory policy (OU).
model_policy = 0
#
# (unsigned int): subtour elimination strategy :
#   0: adds the standard subtour elimination constraints to the model.
#   1: adds lazy and cut constraints from CVRPSEP package.
sec_strategy = 1
#
# ============================= Valid inequalities =============================
#
# The valid inequalities are only used when the standard subtour elimination
# constraints are NOT used (option 0 of the sec_stragety).
#
# (bool): use (or not) the vehicle constraints (VC) valid inequalities.
use_vi_vc = false
#
# (bool): use (or not) the variable reduction (VR) valid inequalities.
use_vi_vr = false
#
# (bool): use (or not) the HC1-Full valid inequalities.
use_vi_hc1_full = false
#
# (bool): use (or not) the HC1-Half valid inequalities.
use_vi_hc1_half = false
#
# (bool): use (or not) the HC1-Quarter valid inequalities.
use_vi_hc1_quarter = false
#
# (bool): use (or not) the HC2 valid inequalities.
use_vi_hc2 = false
#
# (bool): use (or not) the HC3 valid inequalities.
use_vi_hc3 = false
#
# (bool): use (or not) the COS valid inequalities.
use_vi_cos = false
#
# (bool): use (or not) the QUA valid inequalities.
use_vi_qua = false
#
# (bool): use (or not) the CUS valid inequalities.
use_vi_cus = true
#
# (bool): use (or not) the LEX-Full valid inequalities.
use_vi_lex_full = false
#
# (bool): use (or not) the LEX-Half valid inequalities.
use_vi_lex_half = false
#
# (bool): use (or not) the LEX-Quarter valid inequalities.
use_vi_lex_quarter = false